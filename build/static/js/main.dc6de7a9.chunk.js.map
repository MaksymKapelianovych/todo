{"version":3,"sources":["App.js","serviceWorker.js"],"names":["todoItems","push","index","value","done","TodoApp","props","addItem","bind","removeItem","todoDone","state","todoItem","unshift","length","newItemValue","this","setState","itemIndex","splice","id","items","initItems","React","Component","TodoListItem","onClickClose","onClickDone","parseInt","todoClass","item","className","aria-hidden","onClick","type","TodoList","map","key","TodoForm","onSubmit","handleOptionChanged","selectedOption","refs","itemName","focus","event","preventDefault","form","reset","target","countActive","forEach","e","list","document","getElementsByClassName","childNodes","getElementById","ref","placeholder","checked","onChange","TodoHeader","ReactDOM","render","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAgBIA,G,MAAY,IAChBA,EAAUC,KAAK,CAACC,MAAO,EAAGC,MAAO,IAAKC,MAAM,IAC5CJ,EAAUC,KAAK,CAACC,MAAO,EAAGC,MAAO,IAAKC,MAAM,IAC5CJ,EAAUC,KAAK,CAACC,MAAO,EAAGC,MAAO,IAAKC,MAAM,IAC5CJ,EAAUC,KAAK,CAACC,MAAO,EAAGC,MAAO,IAAKC,MAAM,I,IAEtCC,E,YACF,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,QAAU,EAAKA,QAAQC,KAAb,gBACf,EAAKC,WAAa,EAAKA,WAAWD,KAAhB,gBAClB,EAAKE,SAAW,EAAKA,SAASF,KAAd,gBAChB,EAAKG,MAAQ,CAACX,UAAWA,GALV,E,qEAQXY,GACJZ,EAAUa,QAAQ,CACdX,MAAOF,EAAUc,OAAS,EAC1BX,MAAOS,EAASG,aAChBX,MAAM,IAEVY,KAAKC,SAAS,CAACjB,UAAWA,M,iCAGnBkB,GACPlB,EAAUmB,OAAOD,EAAW,GAC5BF,KAAKC,SAAS,CAACjB,UAAWA,M,+BAGrBkB,GACLlB,EAAUkB,GAAWd,MAAMJ,EAAUkB,GAAWd,KAChDY,KAAKC,SAAS,CAACjB,UAAWA,M,+BAI1B,OACI,yBAAKoB,GAAG,QACJ,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUC,MAAOL,KAAKV,MAAMgB,UAAWb,WAAYO,KAAKP,WAAYC,SAAUM,KAAKN,WACnF,kBAAC,EAAD,CAAUH,QAASS,KAAKT,QAASc,MAAOL,KAAKL,MAAMX,iB,GAjC7CuB,IAAMC,WAuCtBC,E,YACF,WAAYnB,GAAQ,IAAD,8BACf,4CAAMA,KACDoB,aAAe,EAAKA,aAAalB,KAAlB,gBACpB,EAAKmB,YAAc,EAAKA,YAAYnB,KAAjB,gBAHJ,E,4EAOf,IAAIN,EAAQ0B,SAASZ,KAAKV,MAAMJ,OAChCc,KAAKV,MAAMG,WAAWP,K,oCAItB,IAAIA,EAAQ0B,SAASZ,KAAKV,MAAMJ,OAChCc,KAAKV,MAAMI,SAASR,K,+BAIpB,IAAI2B,EAAYb,KAAKV,MAAMwB,KAAK1B,KAC5B,OAAS,SACb,OACI,wBAAI2B,UAAU,mBAAmBX,GAAIJ,KAAKV,MAAMwB,KAAK5B,OACjD,yBAAK6B,UAAWF,GACZ,0BAAME,UAAU,8BAA8BC,cAAY,OAAOC,QAASjB,KAAKW,cAC9EX,KAAKV,MAAMwB,KAAK3B,MACjB,4BAAQ+B,KAAK,SAASH,UAAyB,SAAdF,EAAuB,QAAU,SAC1DI,QAASjB,KAAKU,cADtB,c,GAzBOH,IAAMC,WAiC3BW,E,iLACQ,IAAD,OACDd,EAAQL,KAAKV,MAAMe,MAAMe,KAAI,SAACN,EAAM5B,GACpC,OACI,kBAAC,EAAD,CAAcmC,IAAKnC,EAAO4B,KAAMA,EAAM5B,MAAOA,EAAOO,WAAY,EAAKH,MAAMG,WAC7DC,SAAU,EAAKJ,MAAMI,cAG3C,OACI,wBAAIqB,UAAU,cAAd,IAA6BV,EAA7B,S,GATWE,IAAMC,WAcvBc,E,YACF,WAAYhC,GAAQ,IAAD,8BACf,4CAAMA,KACDiC,SAAW,EAAKA,SAAS/B,KAAd,gBAChB,EAAKgC,oBAAsB,EAAKA,oBAAoBhC,KAAzB,gBAC3B,EAAKG,MAAQ,CAAC8B,eAAgB,OAJf,E,iFAQfzB,KAAK0B,KAAKC,SAASC,U,+BAGdC,GACLA,EAAMC,iBACN,IAAI/B,EAAeC,KAAK0B,KAAKC,SAASxC,MAElCY,IACAC,KAAKV,MAAMC,QAAQ,CAACQ,iBACpBC,KAAK0B,KAAKK,KAAKC,W,0CAIHH,GAChB7B,KAAKC,SAAS,CAACwB,eAAgBI,EAAMI,OAAO9C,U,+BAI5C,IAAI+C,EAAc,EAClBlC,KAAKV,MAAMe,MAAM8B,SAAQ,SAACC,GACjBA,EAAEhD,MAAM8C,OAGjB,IAAIG,EAAOC,SAASC,uBAAuB,cACvB,MAAhBF,EAAKvB,KAAK,IACEuB,EAAKvB,KAAK,GAAG0B,WACnBL,SAAQ,SAAAC,GACVA,EAAErB,UAAY,sBAgBtB,MAbkC,WAA9Bf,KAAKL,MAAM8B,eACXzB,KAAKV,MAAMe,MAAM8B,SAAQ,SAACC,GAClBA,EAAEhD,OACJkD,SAASG,eAAeL,EAAElD,OAAO6B,UAAY,aAGd,cAA9Bf,KAAKL,MAAM8B,gBAClBzB,KAAKV,MAAMe,MAAM8B,SAAQ,SAACC,GACjBA,EAAEhD,OACLkD,SAASG,eAAeL,EAAElD,OAAO6B,UAAY,aAKnD,6BACI,0BAAM2B,IAAI,OAAOnB,SAAUvB,KAAKuB,SAAUR,UAAU,eAChD,2BAAOG,KAAK,OAAOwB,IAAI,WAAW3B,UAAU,eAAe4B,YAAY,sBACvE,4BAAQzB,KAAK,SAASH,UAAU,mBAAhC,QAEJ,+BAAQmB,EAAR,eACA,yBAAKnB,UAAU,SACX,+BACI,2BAAOG,KAAK,QAAQ/B,MAAM,MAAMyD,QAAuC,QAA9B5C,KAAKL,MAAM8B,eAC7CoB,SAAU7C,KAAKwB,sBAF1B,QAMJ,yBAAKT,UAAU,SACX,+BACI,2BAAOG,KAAK,QAAQ/B,MAAM,SAASyD,QAAuC,WAA9B5C,KAAKL,MAAM8B,eAChDoB,SAAU7C,KAAKwB,sBAF1B,WAMJ,yBAAKT,UAAU,SACX,+BACI,2BAAOG,KAAK,QAAQ/B,MAAM,YACnByD,QAAuC,cAA9B5C,KAAKL,MAAM8B,eACpBoB,SAAU7C,KAAKwB,sBAH1B,mB,GA1EGjB,IAAMC,WAsFvBsC,E,iLAIE,OAAO,wC,GAHHvC,IACHC,WAMTuC,IAASC,OAAO,kBAAC,EAAD,CAAS1C,UAAWtB,IAAcsD,SAASG,eAAe,SC9LtDQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA+GA,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.dc6de7a9.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport ReactDOM from \"react-dom\";\n\n/*\nTodo app structure\n\nTodoApp\n  - TodoHeader\n  - TodoList\n    - TodoListItem #1\n    - TodoListItem #2\n      ...\n    - TodoListItem #N\n  - TodoForm\n*/\nlet todoItems = [];\ntodoItems.push({index: 0, value: \"1\", done: false});\ntodoItems.push({index: 1, value: \"2\", done: false});\ntodoItems.push({index: 2, value: \"3\", done: false});\ntodoItems.push({index: 3, value: \"4\", done: false});\n\nclass TodoApp extends React.Component {\n    constructor(props) {\n        super(props);\n        this.addItem = this.addItem.bind(this);\n        this.removeItem = this.removeItem.bind(this);\n        this.todoDone = this.todoDone.bind(this);\n        this.state = {todoItems: todoItems};\n    }\n\n    addItem(todoItem) {\n        todoItems.unshift({\n            index: todoItems.length + 1,\n            value: todoItem.newItemValue,\n            done: false\n        });\n        this.setState({todoItems: todoItems});\n    }\n\n    removeItem(itemIndex) {\n        todoItems.splice(itemIndex, 1);\n        this.setState({todoItems: todoItems});\n    }\n\n    todoDone(itemIndex) {\n        todoItems[itemIndex].done=!todoItems[itemIndex].done;\n        this.setState({todoItems: todoItems});\n    }\n\n    render() {\n        return (\n            <div id=\"main\">\n                <TodoHeader/>\n                <TodoList items={this.props.initItems} removeItem={this.removeItem} todoDone={this.todoDone}/>\n                <TodoForm addItem={this.addItem} items={this.state.todoItems}/>\n            </div>\n        );\n    }\n}\n\nclass TodoListItem extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onClickClose = this.onClickClose.bind(this);\n        this.onClickDone = this.onClickDone.bind(this);\n    }\n\n    onClickClose() {\n        let index = parseInt(this.props.index);\n        this.props.removeItem(index);\n    }\n\n    onClickDone() {\n        let index = parseInt(this.props.index);\n        this.props.todoDone(index);\n    }\n\n    render() {\n        let todoClass = this.props.item.done ?\n            \"done\" : \"undone\";\n        return (\n            <li className=\"list-group-item \" id={this.props.item.index}>\n                <div className={todoClass}>\n                    <span className=\"glyphicon glyphicon-ok icon\" aria-hidden=\"true\" onClick={this.onClickDone}></span>\n                    {this.props.item.value}\n                    <button type=\"button\" className={todoClass === \"done\" ? \"close\" : \"hidden\"}\n                            onClick={this.onClickClose}>&times;</button>\n                </div>\n            </li>\n        );\n    }\n}\n\nclass TodoList extends React.Component {\n    render() {\n        let items = this.props.items.map((item, index) => {\n            return (\n                <TodoListItem key={index} item={item} index={index} removeItem={this.props.removeItem}\n                              todoDone={this.props.todoDone}/>\n            );\n        });\n        return (\n            <ul className=\"list-group\"> {items} </ul>\n        );\n    }\n}\n\nclass TodoForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.handleOptionChanged = this.handleOptionChanged.bind(this);\n        this.state = {selectedOption: 'all'};\n    }\n\n    componentDidMount() {\n        this.refs.itemName.focus();\n    }\n\n    onSubmit(event) {\n        event.preventDefault();\n        let newItemValue = this.refs.itemName.value;\n\n        if (newItemValue) {\n            this.props.addItem({newItemValue});\n            this.refs.form.reset();\n        }\n    }\n\n    handleOptionChanged(event) {\n        this.setState({selectedOption: event.target.value})\n    }\n\n    render() {\n        let countActive = 0;\n        this.props.items.forEach((e) => {\n            if (!e.done) countActive++;\n        });\n\n        let list = document.getElementsByClassName(\"list-group\");\n        if (list.item(0) != null) {\n            let items = list.item(0).childNodes;\n            items.forEach(e => {\n                e.className = 'list-group-item '\n            });\n        }\n        if (this.state.selectedOption === 'active') {\n            this.props.items.forEach((e) => {\n                if (e.done) {\n                  document.getElementById(e.index).className = \"hidden\";\n                }\n            });\n        } else if (this.state.selectedOption === 'completed') {\n            this.props.items.forEach((e) => {\n                if (!e.done) {\n                  document.getElementById(e.index).className = \"hidden\";\n                }\n            });\n        }\n        return (\n            <div>\n                <form ref=\"form\" onSubmit={this.onSubmit} className=\"form-inline\">\n                    <input type=\"text\" ref=\"itemName\" className=\"form-control\" placeholder=\"add a new todo...\"/>\n                    <button type=\"submit\" className=\"btn btn-default\">Add</button>\n                </form>\n                <label>{countActive} items left</label>\n                <div className=\"radio\">\n                    <label>\n                        <input type=\"radio\" value=\"all\" checked={this.state.selectedOption === 'all'}\n                               onChange={this.handleOptionChanged}/>\n                        All\n                    </label>\n                </div>\n                <div className=\"radio\">\n                    <label>\n                        <input type=\"radio\" value=\"active\" checked={this.state.selectedOption === 'active'}\n                               onChange={this.handleOptionChanged}/>\n                        Active\n                    </label>\n                </div>\n                <div className=\"radio\">\n                    <label>\n                        <input type=\"radio\" value=\"completed\"\n                               checked={this.state.selectedOption === 'completed'}\n                               onChange={this.handleOptionChanged}/>\n                        Completed\n                    </label>\n                </div>\n            </div>\n        );\n    }\n}\n\nclass TodoHeader\n    extends React\n        .Component {\n    render() {\n        return <h1>Todo</h1>;\n    }\n}\n\nReactDOM.render(<TodoApp initItems={todoItems}/>, document.getElementById('root'));\n\nexport default TodoApp;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n"],"sourceRoot":""}